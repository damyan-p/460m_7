module sseg(clk, num, an, seg);
input [15:0]num;
input clk;
output reg [3:0] an;
output reg[6:0] seg;

reg [1:0]state, nstate;

wire[6:0] in0, in1, in2, in3;
reg[6:0] segs_reg;
assign segs = segs_reg;

hex_to_sseg h0(.x(num[3:0]),.r(in0));
hex_to_sseg h1(.x(num[7:4]),.r(in1));
hex_to_sseg h2(.x(num[11:8]),.r(in2));
hex_to_sseg h3(.x(num[15:12]),.r(in3));


always @(state)
begin
    case(state)
        0:begin
        an <= 4'b1110;
        nstate <= 1;
        segs_reg <= in0;
        end
        1:begin
        an <= 4'b1101;
        nstate <= 2;
        segs_reg <= in1;
        end
        2:begin
         an <= 4'b1011;
         nstate <= 3;
         segs_reg <= in2;
         end
        3:begin
         an <= 4'b0111;
         nstate <= 0;
         segs_reg <= in3;
         end
    endcase

end

endmodule


module hex_to_sseg(
    input [3:0] x,
    output reg [6:0] r
    );

    always @(*)
        case (x)                        
             4'b0000: r = 7'b1000000;    //  40
            4'b0001: r = 7'b1111001;    //  79
            4'b0010: r = 7'b0100100;    //  24
            4'b0011: r = 7'b0110000;    //  30
            4'b0100: r = 7'b0011001;    //  19
            4'b0101: r = 7'b0010010;    //  12
            4'b0110: r = 7'b0000010;    //  02
            4'b0111: r = 7'b1111000;    //  78
            4'b1000: r = 7'b0000000;    //  00
            4'b1001: r = 7'b0010000;    //  10
            4'b1010: r = 7'b0001000;    //  
            4'b1011: r = 7'b0000011;    //  
            4'b1100: r = 7'b1000110;    //  
            4'b1101: r = 7'b0100001;    //  
            4'b1110: r = 7'b0000110;    //  
            4'b1111: r = 7'b0001110;    //  
            default: r = 7'b1111111;   
               
        endcase
endmodule


